<?php

/*
   ----------------------------------------------------------------------
   Monitoring plugin for GLPI
   Copyright (C) 2010-2011 by the GLPI plugin monitoring Team.

   https://forge.indepnet.net/projects/monitoring/
   ----------------------------------------------------------------------

   LICENSE

   This file is part of Monitoring plugin for GLPI.

   Monitoring plugin for GLPI is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 2 of the License, or
   any later version.

   Monitoring plugin for GLPI is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Monitoring plugin for GLPI.  If not, see <http://www.gnu.org/licenses/>.

   ------------------------------------------------------------------------
   Original Author of file: David DURIEUX
   Co-authors of file:
   Purpose of file:
   ----------------------------------------------------------------------
 */

if (!defined('GLPI_ROOT')) {
   die("Sorry. You can't access directly to this file");
}

class PluginMonitoringShinken extends CommonDBTM {
   

   function generateConfig() {
      global $DB,$CFG_GLPI,$LANG;

      


      return true;
   }


   function generateCommandsCfg() {
      $config = "# Generated by plugin monitoring for GLPI\n# on ".date("Y-m-d H:i:s")."\n\n";

      $pluginMonitoringCommand = new PluginMonitoringCommand();

      $a_list = $pluginMonitoringCommand->find();
      foreach ($a_list as $data) {
         $config .= "# ".$data['name']."\n";
         $config .= "define command {\n";
         $config .= "       command_name     ".$data['command_name']."\n";
         $config .= "       command_line     ".$data['command_line']."\n";
         $config .= "}\n";
         $config .= "\n\n";
      }
      return array('commands.cfg', $config);
   }


   
   function generateHostsCfg() {
      $config = "# Generated by plugin monitoring for GLPI\n# on ".date("Y-m-d H:i:s")."\n\n";

      $pluginMonitoringHost = new PluginMonitoringHost();
      $pluginMonitoringHost_Host = new PluginMonitoringHost_Host();
      $pluginMonitoringContact = new PluginMonitoringContact();
      $pluginMonitoringHost_Contact = new PluginMonitoringHost_Contact();
      $pluginMonitoringCommand = new PluginMonitoringCommand();
      $pluginMonitoringCheck = new PluginMonitoringCheck();
      $calendar = new Calendar();
      $user = new User();
      $networkPort = new NetworkPort();

      $a_list = $pluginMonitoringHost->find();
      foreach ($a_list as $data) {
         $classname = $data['itemtype'];
         $class = new $classname;
         $class->getFromDB($data['items_id']);

         $config .= "define host {\n";
         $config .= "       host_name           ".$classname."-".$class->fields['name']."\n";
            $ip = $class->fields['name'];
            if ($data['itemtype'] == 'NetworkEquipment') {
               if ($class->fields['ip'] != '') {
                  $ip = $class->fields['ip'];
               }
            } else {
               $a_listnetwork = $networkPort->find("`itemtype`='".$data['itemtype']."'
                  AND `items_id`='".$data['items_id']."'");
               foreach ($a_listnetwork as $datanetwork) {
                  if ($datanetwork['ip'] != '' AND $datanetwork['ip'] != '127.0.0.1') {
                     $ip = $datanetwork['ip'];
                     break;
                  }
               }
            }
         $config .= "       address             ".$ip."\n";
            $a_parents = array();
            switch ($data['parenttype']) {

               case 0:
                  // Disable
                  break;

               case 1:
                  // Static
                  $a_list_parent = $pluginMonitoringHost_Host->find("`plugin_monitoring_hosts_id_1`='".$data['id']."'");
                  foreach ($a_list_parent as $data_parent) {
                     $pluginMonitoringHost->getFromDB($data_parent['plugin_monitoring_hosts_id_2']);
                     $classnameparent = $pluginMonitoringHost->fields['itemtype'];
                     $classparent = new $classnameparent;
                     $classparent->getFromDB($pluginMonitoringHost->fields['items_id']);
                     $a_parents[] = $classnameparent."-".$classparent->fields['name'];
                  }
                  break;

               case 2:
                  // dynamic

                  break;
               
            }
         if (count($a_parents) > 0) {
            $config .= "       parents             ".implode(',', $a_parents)."\n";
         }
         $pluginMonitoringCommand->getFromDB($data['plugin_monitoring_commands_id']);
         $config .= "       check_command       ".$pluginMonitoringCommand->fields['name']."\n";
         $pluginMonitoringCheck->getFromDB($data['plugin_monitoring_checks_id']);
         $config .= "       check_interval      ".$pluginMonitoringCheck->fields['check_interval']."\n";
         $config .= "       retry_interval      ".$pluginMonitoringCheck->fields['retry_interval']."\n";
         $config .= "       max_check_attempts  ".$pluginMonitoringCheck->fields['max_check_attempts']."\n";
         if ($calendar->getFromDB($data['calendars_id'])) {
            $config .= "       check_period        ".$calendar->fields['name']."\n";
         }
            $a_contacts = array();
            $a_list_contact = $pluginMonitoringHost_Contact->find("`plugin_monitoring_hosts_id`='".$data['id']."'");
            foreach ($a_list_contact as $data_contact) {
               $pluginMonitoringContact->getFromDB($data_contact['plugin_monitoring_contacts_id']);
               $user->getFromDB($pluginMonitoringContact->fields['users_id']);
               $a_contacts[] = $user->fields['name'];
            }
         $config .= "       contacts            ".implode(',', $a_contacts)."\n";
         $config .= "}\n";
         $config .= "\n\n";
      }
      return array('hosts.cfg', $config);
   }



   function generateContactsCfg() {
      $config = "# Generated by plugin monitoring for GLPI\n# on ".date("Y-m-d H:i:s")."\n\n";


      
      return array('contacts.cfg', $config);
   }



   function generateTimeperiodsCfg() {
      $config = "# Generated by plugin monitoring for GLPI\n# on ".date("Y-m-d H:i:s")."\n\n";
      $calendar = new Calendar();
      $calendarSegment = new CalendarSegment();

      $a_listcalendar = $calendar->find();
      foreach ($a_listcalendar as $datacalendar) {
         $config .= "define timeperiod {\n";
         $config .= "       timeperiod_name           ".$datacalendar['name']."\n";
         $a_listsegment = $calendarSegment->find("`calendars_id`='".$datacalendar['id']."'");
         foreach ($a_listsegment as $datasegment) {
            $begin = preg_replace("/:00$/", "", $datasegment['begin']);
            $end = preg_replace("/:00$/", "", $datasegment['end']);
            switch ($datasegment['day']) {

               case "0":
                  $day = "sunday   ";
                  break;

               case "1":
                  $day = "monday   ";
                  break;

               case "2":
                  $day = "tuesday  ";
                  break;

               case "3":
                  $day = "wednesday";
                  break;

               case "4":
                  $day = "thursday ";
                  break;

               case "5":
                  $day = "friday   ";
                  break;

               case "6":
                  $day = "saturday ";
                  break;
               
            }
            $config .= "       ".$day."                 ".$begin."-".$end."\n";
         }
         $config .= "}\n";
         $config .= "\n\n";
      }

      return array('timeperiods.cfg', $config);
   }


}

?>